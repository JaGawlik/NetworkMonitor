using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Windows.Forms;

namespace NetworkMonitor.Utilities
{
    public static class LocalRulesConfigManager 
    {
        private static readonly string LocalRulesFilePath = Path.Combine(AppConfiguration.ConfigurationManager.GetSetting("SnortInstallationPath"), "rules", "local.rules");

        /// <summary>
        /// Wczytuje reguły Snorta z pliku local.rules.
        /// </summary>
        public static List<SnortLocalRule> LoadLocalRules()
        {
            var rules = new List<SnortLocalRule>();

            if (!File.Exists(LocalRulesFilePath))
            {
                Console.WriteLine($"Plik {LocalRulesFilePath} nie istnieje.");
                return rules;
            }

            var lines = File.ReadAllLines(LocalRulesFilePath);
            foreach (var line in lines)
            {
                if (string.IsNullOrWhiteSpace(line) || line.StartsWith("#")) continue;

                var rule = SnortLocalRule.Parse(line);
                if (rule != null)
                {
                    rules.Add(rule);
                }
            }

            return rules;
        }

        /// <summary>
        /// Zapisuje reguły Snorta do pliku local.rules.
        /// </summary>
        public static void SaveRules(List<SnortLocalRule> rules)
        {
            var lines = new List<string>
            {
                "# Custom Local Rules",
                "# =====================",
                "# Generated by NetworkMonitor",
                ""
            };

            foreach (var rule in rules)
            {
                lines.Add(rule.ToString());
            }

            File.WriteAllLines(LocalRulesFilePath, lines);
            Console.WriteLine($"Zapisano {rules.Count} reguł do {LocalRulesFilePath}");
        }

        /// <summary>
        /// Dodaje nową regułę do pliku local.rules.
        /// </summary>
        public static void AddRule(string action, string protocol, string sourceIp, string sourcePort, string direction, string destinationIp, string destinationPort, string message, int sid, int rev)
        {
            var newRule = new SnortLocalRule
            {
                Action = action,
                Protocol = protocol,
                SourceIp = sourceIp,
                SourcePort = sourcePort,
                Direction = direction,
                DestinationIp = destinationIp,
                DestinationPort = destinationPort,
                Message = message,
                Sid = sid,
                Rev = rev
            };

            var rules = LoadLocalRules();
            if (rules.Any(r => r.Sid == sid))
            {
                Console.WriteLine($"Reguła o SID={sid} już istnieje!");
                return;
            }

            rules.Add(newRule);
            SaveRules(rules);
            Console.WriteLine($"Dodano regułę: {newRule}");
        }

        /// <summary>
        /// Usuwa regułę o podanym SID.
        /// </summary>
        public static void RemoveRule(int sid)
        {
            var rules = LoadLocalRules();
            var updatedRules = rules.Where(r => r.Sid != sid).ToList();

            if (rules.Count == updatedRules.Count)
            {
                Console.WriteLine($"Nie znaleziono reguły o SID={sid}.");
                return;
            }

            SaveRules(updatedRules);
            Console.WriteLine($"Usunięto regułę z SID={sid}.");
        }
    }

    /// <summary>
    /// Klasa reprezentująca regułę Snorta.
    /// </summary>
    public class SnortLocalRule
    {
        public string Action { get; set; } = "alert";
        public string Protocol { get; set; } = "tcp";
        public string SourceIp { get; set; } = "any";
        public string SourcePort { get; set; } = "any";
        public string Direction { get; set; } = "->";
        public string DestinationIp { get; set; } = "any";
        public string DestinationPort { get; set; } = "any";
        public string Message { get; set; }
        public int Sid { get; set; }
        public int Rev { get; set; }

        public string FormattedRule => ToString();

        public override string ToString()
        {
            return $"{Action} {Protocol} {SourceIp} {SourcePort} {Direction} {DestinationIp} {DestinationPort} (msg:\"{Message}\"; sid:{Sid}; rev:{Rev};)";
        }

        public static SnortLocalRule Parse(string ruleLine)
        {
            var regexPattern = @"^(?<action>\w+)\s+(?<protocol>\w+)\s+(?<srcip>[^\s]+)\s+(?<srcport>[^\s]+)\s+(?<direction><->|->)\s+(?<dstip>[^\s]+)\s+(?<dstport>[^\s]+)\s+\(msg:""(?<message>[^""]+)"";\s+sid:(?<sid>\d+);\s+rev:(?<rev>\d+);?\)$";

            var match = Regex.Match(ruleLine, regexPattern);
            if (!match.Success)
            {
                Console.WriteLine($"Błąd parsowania reguły: {ruleLine}");
                return null;
            }

            Console.WriteLine($"Reguła: {ruleLine}");

            return new SnortLocalRule
            {
                Action = match.Groups["action"].Value,
                Protocol = match.Groups["protocol"].Value,
                SourceIp = match.Groups["srcip"].Value,
                SourcePort = match.Groups["srcport"].Value,
                Direction = match.Groups["direction"].Value,
                DestinationIp = match.Groups["dstip"].Value,
                DestinationPort = match.Groups["dstport"].Value,
                Message = match.Groups["message"].Value,
                Sid = int.Parse(match.Groups["sid"].Value),
                Rev = int.Parse(match.Groups["rev"].Value)
            };
        }
    }

}
